from aiogram.filters import Command, Filter
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramForbiddenError, TelegramRetryAfter


from src.keyboards.keyboards import admin_panel, cancel_kb, confirm_kb

from config import admins

from src.database.models import User
from sqlalchemy import select
import asyncio
from init_db import async_session_maker


admin_router = Router()

# –õ—É—á—à–µ —Ö—Ä–∞–Ω–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥–µ
ADMINS_IDS = admins

class IsAdminFilter(Filter):
    async def __call__(self, message: Message) -> bool:
        # –†–∞–∑—Ä–µ—à–∞–µ–º –∫–æ–º–∞–Ω–¥—É /admin –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if isinstance(message, Message) and message.text and message.text.startswith('/admin'):
            return message.from_user.id in ADMINS_IDS
        return message.from_user.id in ADMINS_IDS

    

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞    
admin_router.message.filter(IsAdminFilter())
admin_router.callback_query.filter(IsAdminFilter())


@admin_router.message(Command("admin"))
async def handle_admin_command_anywhere(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ /admin –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    await state.clear()
    
    if message.from_user.id not in ADMINS_IDS:
        pass
    
    await message.answer(
        "üë®‚Äçüíª –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
        reply_markup=admin_panel()
    )


@admin_router.callback_query(F.data == "admin_back")
async def go_back(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    await callback.message.edit_text(
        "üë®‚Äçüíª –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
        reply_markup=admin_panel()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    )
    await callback.answer()


@admin_router.callback_query(F.data == "admin_stats")
async def show_statistics(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞"""
    async with async_session_maker() as session:
        result = await session.stream(select(User.telegram_id))
        user_ids = [user.telegram_id async for user in result]
        total_users = len(user_ids)
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
        stats_text = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –º–µ—Å—è—Ü: 256\n"
            f"üî¥ –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: 12\n"
            f"üìù –°–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: 345"
        )
        
        back_button = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ])
        
        await callback.message.edit_text(stats_text, reply_markup=back_button)

class MailingStates(StatesGroup):
    WAITING_TEXT = State()
    WAITING_CONFIRM = State()

@admin_router.callback_query(F.data == "admin_mailing")
async def mailing(callback: CallbackQuery, state: FSMContext):
    """–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç",
        reply_markup=cancel_kb()
    )
    await state.set_state(MailingStates.WAITING_TEXT)
    await callback.answer()

@admin_router.message(MailingStates.WAITING_TEXT)
async def process_mailing_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"""
    await state.update_data(mailing_text=message.html_text)

    await message.answer(
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É:\n\n{message.html_text}\n\n"
        "–ë—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞.",
        reply_markup=confirm_kb(),
        parse_mode="HTML"
    )
    await state.set_state(MailingStates.WAITING_CONFIRM)

async def send_message_with_retry(bot: Bot, chat_id: int, text: str, parse_mode: str = "HTML"):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"""
    try:
        await bot.send_message(chat_id=chat_id, text=text, parse_mode=parse_mode)
        return True
    except TelegramRetryAfter as e:
        await asyncio.sleep(e.retry_after)
        return await send_message_with_retry(bot, chat_id, text, parse_mode)
    except TelegramForbiddenError:
        return False
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
        return False
    

@admin_router.callback_query(F.data == "confirm_mailing", MailingStates.WAITING_CONFIRM)
async def execute_mailing(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    data = await state.get_data()
    mailing_text = data['mailing_text']
    admin_id = callback.from_user.id
    
    progress_msg = await callback.message.edit_text("‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ...")
    await callback.answer()
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
    async with async_session_maker() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ (telegram_id)
        result = await session.execute(select(User.telegram_id))
        user_ids = [uid for uid in result.scalars().all() if uid != admin_id]
        total_users = len(user_ids)
        
        success = 0
        failed = 0
        batch_size = 50  # –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        
        for i, user_id in enumerate(user_ids, 1):
            try:
                await bot.send_message(
                    chat_id=user_id,
                    text=mailing_text,
                    parse_mode="HTML"
                )
                success += 1
            except TelegramForbiddenError:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
                failed += 1
            except TelegramRetryAfter as e:
                # –ü—Ä–µ–≤—ã—à–µ–Ω—ã –ª–∏–º–∏—Ç—ã - –¥–µ–ª–∞–µ–º –ø–∞—É–∑—É
                await asyncio.sleep(e.retry_after)
                try:
                    await bot.send_message(
                        chat_id=user_id,
                        text=mailing_text,
                        parse_mode="HTML"
                    )
                    success += 1
                except Exception:
                    failed += 1
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")
                failed += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            if i % batch_size == 0 or i == total_users:
                progress = min(i / total_users * 100, 100)
                await progress_msg.edit_text(
                    f"‚è≥ –†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...\n\n"
                    f"‚ñ∞{'‚ñ∞' * int(progress // 10)}{'‚ñ±' * (10 - int(progress // 10))}\n"
                    f"üìä {i}/{total_users} ({progress:.1f}%)\n"
                    f"‚úÖ {success} | ‚ùå {failed}"
                )
            
            # –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            await asyncio.sleep(0.03)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    report = (
        f"üìä <b>–û—Ç—á–µ—Ç –æ —Ä–∞—Å—Å—ã–ª–∫–µ</b>\n\n"
        f"‚ñ™Ô∏è –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}\n"
        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed}\n\n"
        f"<i>–ü–æ—Å–ª–µ–¥–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</i>"
    )
    
    await progress_msg.edit_text(
        report,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")]
        ]),
        parse_mode="HTML"
    )
    await state.clear()