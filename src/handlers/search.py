from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
import requests
import logging
import random
from os import getenv
from typing import Dict, Any, Optional

router = Router()
HEADERS = {"X-API-KEY": getenv("KNP_TOKEN")}
KINOPOISK_API_URL = "https://kinopoiskapiunofficial.tech/api"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class MovieStates(StatesGroup):
    waiting_for_title = State()

# –û—Å–Ω–æ–≤–Ω—ã–µ –∂–∞–Ω—Ä—ã
MAIN_GENRES = {
    "–∫–æ–º–µ–¥–∏—è": 13,
    "–¥—Ä–∞–º–∞": 2,
    "–±–æ–µ–≤–∏–∫": 11,
    "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞": 6,
    "—É–∂–∞—Å—ã": 17,
    "—Ç—Ä–∏–ª–ª–µ—Ä": 1,
    "–º–µ–ª–æ–¥—Ä–∞–º–∞": 4,
    "–¥–µ—Ç–µ–∫—Ç–∏–≤": 5,
    "–º—É–ª—å—Ç—Ñ–∏–ª—å–º": 18,
    "—Ñ—ç–Ω—Ç–µ–∑–∏": 12
}

def normalize_film_data(film_data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–∞ –∏–∑ —Ä–∞–∑–Ω—ã—Ö API endpoints"""
    if not film_data:
        return None
    
    # –î–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ–∏—Å–∫–∞ (v2.1)
    if 'filmId' in film_data or 'kinopoiskId' in film_data:
        return {
            'id': str(film_data.get('filmId') or film_data.get('kinopoiskId')),
            'name': film_data.get('nameRu') or film_data.get('nameEn') or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
            'year': film_data.get('year', ''),
            'rating': film_data.get('rating', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'),
            'poster': film_data.get('posterUrlPreview') or film_data.get('posterUrl')
        }
    
    # –î–∞–Ω–Ω—ã–µ –∏–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (v2.2)
    if 'kinopoiskId' in film_data:
        return {
            'id': str(film_data.get('kinopoiskId')),
            'name': film_data.get('nameRu') or film_data.get('nameOriginal') or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
            'year': film_data.get('year', ''),
            'rating': film_data.get('ratingKinopoisk') or film_data.get('ratingImdb') or '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
            'poster': film_data.get('posterUrlPreview') or film_data.get('posterUrl')
        }
    
    return None

async def search_movies(title: str) -> list[Dict[str, Any]]:
    """–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
    try:
        response = requests.get(
            f"{KINOPOISK_API_URL}/v2.1/films/search-by-keyword",
            headers=HEADERS,
            params={"keyword": title, "page": 1}
        )
        response.raise_for_status()
        
        films = []
        for film in response.json().get('films', [])[:5]:
            if normalized := normalize_film_data(film):
                films.append(normalized)
        
        return films
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}")
        return []

async def get_movie_details(film_id: str) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π —Ñ–∏–ª—å–º–∞ –ø–æ ID"""
    try:
        response = requests.get(
            f"{KINOPOISK_API_URL}/v2.2/films/{film_id}",
            headers=HEADERS
        )
        response.raise_for_status()
        return normalize_film_data(response.json())
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª—å–º–∞: {str(e)}")
        return None

async def get_random_movie(genre: str = None) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –ø–æ –∂–∞–Ω—Ä—É)"""
    try:
        params = {
            "order": "RATING",
            "type": "FILM",
            "page": random.randint(1, 5)
        }
        
        if genre and genre in MAIN_GENRES:
            params["genre"] = MAIN_GENRES[genre]
        
        response = requests.get(
            f"{KINOPOISK_API_URL}/v2.1/films/search-by-filters",
            headers=HEADERS,
            params=params
        )
        response.raise_for_status()
        
        films = response.json().get('films', [])
        if films:
            return normalize_film_data(random.choice(films))
        
        return None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞: {str(e)}")
        return None

async def send_movie_info(message: Message, film: Dict[str, Any]):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ"""
    if not film:
        await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∏–ª—å–º–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    info = [
        f"üé¨ {film['name']}",
        f"üìÖ –ì–æ–¥: {film['year']}" if film.get('year') else "",
        f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {film['rating']}",
        f"üîó https://www.kinopoisk.ru/film/{film['id']}/"
    ]
    
    caption = "\n".join(filter(None, info))
    
    try:
        if film.get('poster'):
            await message.answer_photo(film['poster'], caption=caption)
        else:
            await message.answer(caption)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}")
        await message.answer(caption)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
@router.callback_query(F.data == "find_movie")
async def start_search(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞:")
    await state.set_state(MovieStates.waiting_for_title)
    await callback.answer()

@router.message(MovieStates.waiting_for_title)
async def process_search(message: Message, state: FSMContext):
    title = message.text.strip()
    if len(title) < 2:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞")
        return
    
    await message.answer("üîç –ò—â–µ–º —Ñ–∏–ª—å–º—ã...")
    films = await search_movies(title)
    
    if not films:
        await message.answer("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    elif len(films) == 1:
        await send_movie_info(message, films[0])
    else:
        builder = InlineKeyboardBuilder()
        for film in films:
            text = f"{film['name']}"
            if film.get('year'):
                text += f" ({film['year']})"
            builder.button(text=text, callback_data=f"film_{film['id']}")
        
        builder.adjust(1)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å–º:", reply_markup=builder.as_markup())
    
    await state.clear()

@router.callback_query(F.data.startswith("film_"))
async def show_movie_details(callback: CallbackQuery):
    film_id = callback.data.split("_")[1]
    film = await get_movie_details(film_id)
    
    if film:
        await send_movie_info(callback.message, film)
    else:
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ")
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∂–∞–Ω—Ä–∞–º–∏
@router.callback_query(F.data == "random_movie")
async def send_random_movie_handler(callback: CallbackQuery):
    film = await get_random_movie()
    if film:
        await send_movie_info(callback.message, film)
    else:
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º")
    await callback.answer()

@router.callback_query(F.data == "random_movie_genre")
async def show_genres_handler(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()
    for genre in MAIN_GENRES:
        builder.button(text=genre.capitalize(), callback_data=f"genre_{genre}")
    builder.adjust(2)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä:", reply_markup=builder.as_markup())
    await callback.answer()

@router.callback_query(F.data.startswith("genre_"))
async def send_movie_by_genre_handler(callback: CallbackQuery):
    genre = callback.data.split("_")[1]
    film = await get_random_movie(genre)
    if film:
        await send_movie_info(callback.message, film)
    else:
        await callback.message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º –≤ –∂–∞–Ω—Ä–µ {genre}")
    await callback.answer()