import requests
import random
import logging
from os import getenv
from typing import Dict, Any, Optional, List

from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder

router = Router()
HEADERS = {"X-API-KEY": getenv("KNP_API")}
KINOPOISK_API_URL = "https://api.kinopoisk.dev/v1.4"

class MovieStates(StatesGroup):
    waiting_for_title = State()


MAIN_GENRES = {
    "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞": "sci-fi",
    "–∫–æ–º–µ–¥–∏—è": "comedy",
    "–±–æ–µ–≤–∏–∫": "action",
    "–¥—Ä–∞–º–∞": "drama",
    "—É–∂–∞—Å—ã": "horror"
}

async def get_random_movie(genre: str = None) -> Optional[Dict[str, Any]]:
    logging.debug(f"Searching for genre: {genre}")
    try:
        # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        params = {
            "limit": 10,
            "selectFields": ["id", "name", "year", "rating", "genres", "poster"],
            "type": "movie",
            "notNullFields": ["name", "poster.url"]
        }
        
        if genre:
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø–µ—Ä–µ–¥–∞–µ–º –∂–∞–Ω—Ä –∫–∞–∫ —Å—Ç—Ä–æ–∫—É, –∞ –Ω–µ —Å–ø–∏—Å–æ–∫
            params["genres.name"] = genre
            
        # –õ–æ–≥–∏—Ä—É–µ–º URL –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logging.debug(f"Request params: {params}")
        
        response = requests.get(
            f"{KINOPOISK_API_URL}/movie",
            headers=HEADERS,
            params=params,
            timeout=15
        )
        
        logging.debug(f"Full request URL: {response.url}")
        logging.debug(f"Response status: {response.status_code}")
        
        if response.status_code == 400:
            error_data = response.json()
            logging.error(f"API validation error: {error_data}")
            return None
            
        response.raise_for_status()
        
        films = response.json().get('docs', [])
        logging.debug(f"Found {len(films)} films for genre '{genre}'")
        
        if not films:
            return None
            
        selected_film = random.choice(films)
        return normalize_film_data(selected_film)
        
    except requests.exceptions.RequestException as e:
        logging.error(f"Request failed: {str(e)}")
        return None
    except Exception as e:
        logging.error(f"Unexpected error: {str(e)}", exc_info=True)
        return None
    

def normalize_film_data(film_data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å —É—á–µ—Ç–æ–º –≥—Ä—É–ø–ø–æ–≤—ã—Ö –ø–æ–ª–µ–π"""
    if not film_data:
        return None
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
    rating = film_data.get('rating', {})
    rating_kp = str(round(rating.get('kp', 0), 1)) if rating.get('kp') else '–Ω–µ—Ç'
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–µ—Ä–∞
    poster = film_data.get('poster', {})
    poster_url = poster.get('url', '') if poster else ''
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∂–∞–Ω—Ä–æ–≤
    genres = film_data.get('genres', [])
    genre_names = [g.get('name', '') for g in genres if isinstance(g, dict)]
    
    return {
        'id': str(film_data.get('id', '')),
        'name': film_data.get('name') or film_data.get('alternativeName', '') or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
        'year': str(film_data.get('year', '')),
        'rating': rating_kp,
        'poster': poster_url,
        'genre': ', '.join(genre_names) if genre_names else '–Ω–µ —É–∫–∞–∑–∞–Ω'
    }

async def search_movies(title: str) -> List[Dict[str, Any]]:
    try:
        response = requests.get(
            f"{KINOPOISK_API_URL}/movie/search",
            headers=HEADERS,
            params={
                "query": title,
                "limit": 5,
                "selectFields": ["id", "name", "alternativeName", "year", "rating.kp", "poster.url", "genres"]
            },
            timeout=10
        )
        response.raise_for_status()
        
        films = response.json().get('docs', [])
        return [normalize_film_data(f) for f in films if f]
        
    except Exception as e:
        logging.error(f"Search error: {e}")
        return []

async def send_movie_info(message: Message, film: Dict[str, Any]):
    if not film:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ")
        return
    
    text = (
        f"üé¨ <b>{film['name']}</b>\n"
        f"üìÖ {film['year']} | ‚≠ê {film['rating']} | üé≠ {film['genre']}\n"
        f"üîó https://www.kinopoisk.ru/film/{film['id']}/"
    )
    
    try:
        if film.get('poster'):
            await message.answer_photo(film['poster'], caption=text, parse_mode="HTML")
        else:
            await message.answer(text, parse_mode="HTML")
    except Exception as e:
        logging.error(f"Send error: {e}")
        await message.answer(text, parse_mode="HTML")

@router.callback_query(F.data == "random_movie")
async def handle_random(callback: CallbackQuery):
    await callback.answer("–ò—â–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º...")
    
    film = await get_random_movie()
    if film:
        await send_movie_info(callback.message, film)
    else:
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä")

@router.callback_query(F.data.startswith("genre_"))
async def handle_genre(callback: CallbackQuery):
    genre_id = callback.data.split("_")[1]
    genre_name = next((k for k, v in MAIN_GENRES.items() if v == genre_id), "—Ñ–∏–ª—å–º")
    
    await callback.answer(f"–ò—â–µ–º {genre_name} —Ñ–∏–ª—å–º...")
    
    film = await get_random_movie(genre_id)
    if film:
        await send_movie_info(callback.message, film)
    else:
        await callback.message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ {genre_name} —Ñ–∏–ª—å–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∂–∞–Ω—Ä")

@router.callback_query(F.data == "find_movie")
async def start_search(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
    await state.set_state(MovieStates.waiting_for_title)
    await callback.answer()

@router.message(MovieStates.waiting_for_title)
async def process_search(message: Message, state: FSMContext):
    title = message.text.strip()
    if len(title) < 2:
        await message.answer("–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")
        return
    
    films = await search_movies(title)
    
    if not films:
        await message.answer("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    elif len(films) == 1:
        await send_movie_info(message, films[0])
    else:
        builder = InlineKeyboardBuilder()
        for film in films:
            builder.button(
                text=f"{film['name']} ({film['year']})",
                callback_data=f"film_{film['id']}"
            )
        builder.adjust(1)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å–º:", reply_markup=builder.as_markup())
    
    await state.clear()

@router.callback_query(F.data.startswith("film_"))
async def show_details(callback: CallbackQuery):
    film_id = callback.data.split("_")[1]
    
    try:
        response = requests.get(
            f"{KINOPOISK_API_URL}/movie/{film_id}",
            headers=HEADERS,
            params={
                "selectFields": ["id", "name", "alternativeName", "year", "rating.kp", "poster.url", "genres"]
            },
            timeout=10
        )
        response.raise_for_status()
        
        film = normalize_film_data(response.json())
        if film:
            await send_movie_info(callback.message, film)
        else:
            await callback.message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")
            
    except Exception as e:
        logging.error(f"Film details error: {e}")
        await callback.message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")
    
    await callback.answer()

@router.callback_query(F.data == "random_movie_genre")
async def show_genres(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()
    for name, genre_id in MAIN_GENRES.items():
        builder.button(text=name.capitalize(), callback_data=f"genre_{genre_id}")
    builder.adjust(2)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä:", reply_markup=builder.as_markup())
    await callback.answer()